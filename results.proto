syntax = "proto3";
package raw;
option go_package = "./;raw";

import "google/protobuf/timestamp.proto";

/**
* Sast Results gRPC Service v1.0.0
* This service is available in sast-results on port 26503
 */
service Results {
  // GetSastResults gets RequestGetSastResults and returns ResponseSastResults
  rpc GetSastResults(RequestGetSastResults) returns (ResponseSastResults);
  // GetNewSastResults gets RequestGetSastResultsDiff and returns ResponseSastResults
  rpc GetNewSastResults(RequestGetSastResultsDiff) returns (ResponseSastResults);
  // GetFixedSastResults gets RequestGetSastResultsDiff and returns ResponseSastResults
  rpc GetFixedSastResults(RequestGetSastResultsDiff) returns (ResponseSastResults);
}

// Get Sast Results Request
message RequestGetSastResults {
  string scan_id = 1; // The scan id of the results. example: d6e96b11-5fe1-4e70-b341-d57e24def4a6
  string tenant = 2 [(openapi.v3.property) = {description: "The tenant id of the results." example: {yaml: "281504ab-1f97-4eba-b116-a45cb398e50d"}}];
  repeated Filter filters = 3 [(openapi.v3.property) = {description: "Filters to apply to the results." example: {yaml: "[SEVERITY,0,HIGH]"}}];
  bool include_nodes = 4 [(openapi.v3.property) = {description: "Whether to include nodes information to the results."}];
  bool apply_predicates = 5 [(openapi.v3.property) = {description: "Whether to apply result management changes to the results."}];
  uint32 offset = 6 [(openapi.v3.property) = {description: "Number of pages to skip before returning results."}];
  uint32 limit = 7 [(openapi.v3.property) = {description: "Page size of results to return." example: {yaml: "10000"}}];
  repeated Sort sorts = 8 [(openapi.v3.property) = {description: "Sorts to apply to the results." example: {yaml: "+severity,-state"}}];
}

// Get Sast Results Diff Request
message RequestGetSastResultsDiff {
  string dest_scan_id = 1 [(openapi.v3.property) = {description: "The destination scan id of the results comparison."}];
  string source_branch = 2 [(openapi.v3.property) = {description: "The source branch of the results comparison."}];
  string project_id = 3 [(openapi.v3.property) = {description: "The project id of the results comparison."}];
  string tenant = 4 [(openapi.v3.property) = {description: "The tenant id of the results comparison."}];
  repeated Filter filters = 5 [(openapi.v3.property) = {description: "Filters to apply to the results."}];
  bool include_nodes = 6 [(openapi.v3.property) = {description: "Whether to include nodes information to the results."}];
  bool apply_predicates = 7 [(openapi.v3.property) = {description: "Whether to apply result management changes to the results."}];
  uint32 offset = 8 [(openapi.v3.property) = {description: "Number of pages to skip before returning results."}];
  uint32 limit = 9 [(openapi.v3.property) = {description: "Page size of results to return."}];
  repeated Sort sorts = 10 [(openapi.v3.property) = {description: "Sorts to apply to the results."}];
}

// Sort Object
message Sort {
  Field field = 1; // Sort fields can be a combination of SEVERITY(0), STATUS(1), QUERY_NAME(2), FIRST_FOUND_AT(3), FOUND_AT(4) and FIRST_SCAN_ID(5)
  Direction direction = 2; // Sort field direction can be either ASC(-) or DESC(+)

  // Sort Direction
  enum Direction {
    ASC = 0; // ASC(0)
    DESC = 1; // DESC(1)
  }

  // Sort field
  enum Field {
    SEVERITY = 0;
    STATUS = 1;
    QUERY_NAME = 2;
    FIRST_FOUND_AT = 3;
    FOUND_AT = 4;
    FIRST_SCAN_ID = 5;
  }
}

message Filter {
  Field field = 1 [(openapi.v3.property) = {description: "Filter fields can be a combination of SEVERITY(0), STATUS(1) and QUERY_NAME(2)."}];
  Operation operation = 2 [(openapi.v3.property) = {description: "Operation on field can be either EQUALS(0) or CONTAINS(1)."}];
  repeated string values = 3 [(openapi.v3.property) = {description: "Possible values of a filter field."}];

  enum Operation {
    EQUALS = 0;
    CONTAINS = 1;
  }
  enum Field {
    SEVERITY = 0;
    STATUS = 1;
    QUERY_NAME = 2;
  }
}

message ResponseSastResults {
  string scan_id = 1 [(openapi.v3.property) = {description: "The scan id of the results."}];
  repeated SastResult results = 2 [(openapi.v3.property) = {description: "A list of the results."}];
  uint32 totalCount = 3 [(openapi.v3.property) = {description: "Total results count (for paging)"}];
}


message SastResult {
  string ID = 1 [(openapi.v3.property) = {description: "The result id field."}];
  int64 similarityID = 2 [(openapi.v3.property) = {description: "The similarity id field."}];
  uint64 queryID = 3 [(openapi.v3.property) = {description: "The query id field."}];
  string queryName = 4 [(openapi.v3.property) = {description: "The query name field."}];
  string groupName = 5 [(openapi.v3.property) = {description: "The group name field."}];
  Severity severity = 6 [(openapi.v3.property) = {description: "The severity of the results can be either HIGH, MEDIUM, LOW, INFO or TRACE."}];
  int64 cweID = 7 [(openapi.v3.property) = {description: "The cwe id field."}];
  repeated string compliance = 8 [(openapi.v3.property) = {description: "The compliance list field."}];
  string languageName = 9 [(openapi.v3.property) = {description: "The language name field."}];
  float confidenceLevel = 10 [(openapi.v3.property) = {description: "The confidence level of the existence of the result."}];
  repeated Node nodes = 11 [(openapi.v3.property) = {description: "The list of nodes represent the flow of the result."}];
  string firstScanID = 12 [(openapi.v3.property) = {description: "The first scan id of the result."}];
  Status Status = 13 [(openapi.v3.property) = {description: "The status of the result can be either NEW, RECURRENT or FIXED."}];
  State State = 14 [(openapi.v3.property) = {description: "The state of the result can be either TO_VERIFY, NOT_EXPLOITABLE, PROPOSED_NOT_EXPLOITABLE, CONFIRMED or URGENT."}];
  google.protobuf.Timestamp foundAt = 15 [(openapi.v3.property) = {description: "The time the result was found."}];
  google.protobuf.Timestamp firstFoundAt = 16 [(openapi.v3.property) = {description: "The first time the result (similarity) was found."}];
  string description = 17 [(openapi.v3.property) = {description: "The result query description."}];

  message Node {
    option (openapi.v3.schema) = {
      title: "SastResult_Node";
    };

    string ID = 1 [(openapi.v3.property) = {description: "The node unique id."}];
    int32 column = 2 [(openapi.v3.property) = {description: "The node column position."}];
    string fileName = 3 [(openapi.v3.property) = {description: "The file name of the node containing source file."}];
    string fullName = 4 [(openapi.v3.property) = {description: "The node full query name."}];
    int32 length = 5 [(openapi.v3.property) = {description: "The node length."}];
    int32 line = 6 [(openapi.v3.property) = {description: "The node line position."}];
    int32 methodLine = 7 [(openapi.v3.property) = {description: "The node containing method line position."}];
    string name = 8 [(openapi.v3.property) = {description: "The node name."}];
    string domType = 9 [(openapi.v3.property) = {description: "The node dom type."}];
    string method = 10 [(openapi.v3.property) = {description: "The name of containing method."}];
  }
}

enum Severity {
  HIGH = 0;
  MEDIUM = 1;
  LOW = 2;
  INFO = 3;
  TRACE = 4;
}

enum Status {
  NEW = 0;
  RECURRENT = 1;
  FIXED = 2;
}

enum State {
  TO_VERIFY = 0;
  NOT_EXPLOITABLE = 1;
  PROPOSED_NOT_EXPLOITABLE = 2;
  CONFIRMED = 3;
  URGENT = 4;
}
